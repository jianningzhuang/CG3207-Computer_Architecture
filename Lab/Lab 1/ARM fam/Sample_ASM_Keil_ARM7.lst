


ARM Macro Assembler    Page 1 


    1 00000000         ;-------------------------------------------------------
                       ---------------------------
    2 00000000         ;-- License terms :
    3 00000000         ;-- You are free to use this code as long as you
    4 00000000         ;--  (i) DO NOT post it on any public repository;
    5 00000000         ;--  (ii) use it only for educational purposes;
    6 00000000         ;--  (iii) accept the responsibility to ensure that your
                        implementation does not violate any intellectual proper
                       ty of ARM Holdings or other entities.
    7 00000000         ;--  (iv) accept that the program is provided "as is" wi
                       thout warranty of any kind or assurance regarding its su
                       itability for any particular purpose;
    8 00000000         ;--  (v) send an email to rajesh.panicker@ieee.org brief
                       ly mentioning its use (except when used for the course C
                       G3207 at the National University of Singapore);
    9 00000000         ;--  (vi) retain this notice in this file or any files d
                       erived from this.
   10 00000000         ;-------------------------------------------------------
                       ---------------------------
   11 00000000         
   12 00000000                 AREA             MYCODE, CODE, READONLY, ALIGN=9
   13 00000000                 ENTRY
   14 00000000         
   15 00000000         ; ------- <code memory (ROM mapped to Instruction Memory
                       ) begins>
   16 00000000         ; Total number of instructions should not exceed 127 (12
                       6 excluding the last line 'halt B halt').
   17 00000000 E3A00000        MOV              R0, #0      ; R0 stores total
   18 00000004 E1A0100F        MOV              R1, R15     ; It is interesting
                                                             to note that R15 i
                                                            s read as PC+8 in A
                                                            RM7. Here, R1 = PC+
                                                            8 = 4 + 8 = 0xC
   19 00000008         loop
   20 00000008 E0800001        ADD              R0, R0, R1
   21 0000000C E2511001        SUBS             R1, R1, #1
   22 00000010 1AFFFFFC        BNE              loop        ; loops 12 times as
                                                             R1 = 12 in line 8.
                                                            
   23 00000014         ; some random instructions below to illustrate loads and
                        stores - doesn't do anything meaningful
   24 00000014 E51F0008        LDR              R0, constant1 ; 
   25 00000018 E50F5008        STR              R5, variable1 ; PC relative STR
                                                            s are supported in 
                                                            ARM7 (ARMv3 ISA), u
                                                            nlike LPC1769/ARM C
                                                            ortex M3 (ARMv7M IS
                                                            A)
   26 0000001C E51F5008        LDR              R5, variable1 ; load from a var
                                                            iable only after st
                                                            oring something to 
                                                            it (variables are i
                                                            n RAM - a volatile 
                                                            memory)
   27 00000020 E51F2008        LDR              R2, variable1_addr ; to get the
                                                             address of variabl
                                                            e1 in R2. 
   28 00000024         ; instead of the pseudo-instruction LDR  R2, =variable1,
                        use LDR R2, variable1_addr and variable1_addr DCD varia



ARM Macro Assembler    Page 2 


                       ble1
   29 00000024 E5820000        STR              R0, [R2]    ; store using addre
                                                            ss of variable 1 as
                                                             a pointer. *R2 = R
                                                            0;
   30 00000028 E5820004        STR              R0, [R2,#4] ; *(R2+4) = R0;
   31 0000002C         halt
   32 0000002C EAFFFFFE        B                halt        ; infinite loop to 
                                                            halt computation. /
                                                            / A program should 
                                                            not "terminate" wit
                                                            hout an operating s
                                                            ystem to return con
                                                            trol to
   33 00000030         ; keep halt B halt as the last line of your code.
   34 00000030         ; ------- <\code memory (ROM mapped to Instruction Memor
                       y) ends>
   35 00000030         
   36 00000030         
   37 00000030                 AREA             CONSTANTS, DATA, READONLY, ALIG
N=9
   38 00000000         ; ------- <constant memory (ROM mapped to Data Memory) b
                       egins>
   39 00000000         ; All constants should be declared in this section. This
                        section is read only (Only LDR, no STR).
   40 00000000         ; Total number of constants should not exceed 128 (124 e
                       xcluding the 4 used for peripheral pointers).
   41 00000000         ; If a variable is accessed multiple times, it is better
                        to store the address in a register and use it rather th
                       an load it repeatedly.
   42 00000000         
   43 00000000         ;Peripheral pointers
   44 00000000         LEDS
   45 00000000 00000C00        DCD              0x00000C00  ; Address of LEDs. 
                                                            //volatile unsigned
                                                             int * const LEDS =
                                                             (unsigned int*)0x0
                                                            0000C00;  
   46 00000004         DIPS
   47 00000004 00000C04        DCD              0x00000C04  ; Address of DIP sw
                                                            itches. //volatile 
                                                            unsigned int * cons
                                                            t DIPS = (unsigned 
                                                            int*)0x00000C04;
   48 00000008         PBS
   49 00000008 00000C08        DCD              0x00000C08  ; Address of Push B
                                                            uttons. Used only i
                                                            n Lab 2
   50 0000000C         UART
   51 0000000C 00000C0C        DCD              0x00000C0C  ; Address of UART. 
                                                            Used only in Lab 2
   52 00000010         
   53 00000010         ; Rest of the constants should be declared below.
   54 00000010         DELAY_VAL
   55 00000010 00000004        DCD              0x4         ; The number of ste
                                                            ps of delay // cons
                                                            t unsigned int DELA
                                                            Y_VAL = 4;
   56 00000014         variable1_addr



ARM Macro Assembler    Page 3 


   57 00000014 00000000        DCD              variable1   ; address of variab
                                                            le1. Required since
                                                             we are avoiding ps
                                                            eudo-instructions /
                                                            / unsigned int * co
                                                            nst variable1_addr 
                                                            = &variable1;
   58 00000018         constant1
   59 00000018 ABCD1234        DCD              0xABCD1234  ; // const unsigned
                                                             int constant1 = 0x
                                                            ABCD1234;
   60 0000001C         string1
   61 0000001C 48 65 6C 
              6C 6F 20 
              57 6F 72 
              6C 64 21 
              21 21 21 
              00               DCB              "Hello World!!!!",0 ; // unsign
                                                            ed char string1[] =
                                                             "Hello World!"; //
                                                             assembler will iss
                                                            ue a warning if the
                                                             string size is not
                                                             a multiple of 4, b
                                                            ut the warning is s
                                                            afe to ignore
   62 0000002C         
   63 0000002C         ; ------- <constant memory (ROM mapped to Data Memory) e
                       nds> 
   64 0000002C         
   65 0000002C         
   66 0000002C                 AREA             VARIABLES, DATA, READWRITE, ALI
GN=9
   67 00000000         ; ------- <variable memory (RAM mapped to Data Memory) b
                       egins>
   68 00000000         ; All variables should be declared in this section. This
                        section is read-write.
   69 00000000         ; Total number of variables should not exceed 128. 
   70 00000000         ; No initialization possible in this region. In other wo
                       rds, you should write to a location before you can read 
                       from it (i.e., write to a location using STR before read
                       ing using LDR).
   71 00000000         
   72 00000000         variable1
   73 00000000 00000000        DCD              0x00000000  ;  // unsigned int 
                                                            variable1;
   74 00000004         ; ------- <variable memory (RAM mapped to Data Memory) e
                       nds> 
   75 00000004         
   76 00000004                 END
Command Line: --debug --xref --apcs=interwork --depend=.\Sample_ASM_Keil_ARM7.d
 -o.\Sample_ASM_Keil_ARM7.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include 
--predefine="__EVAL SETA 1" --list=Sample_ASM_Keil_ARM7.lst ..\Sample_ASM_Keil_
ARM7.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MYCODE 00000000

Symbol: MYCODE
   Definitions
      At line 12 in file ..\Sample_ASM_Keil_ARM7.s
   Uses
      None
Comment: MYCODE unused
halt 0000002C

Symbol: halt
   Definitions
      At line 31 in file ..\Sample_ASM_Keil_ARM7.s
   Uses
      At line 32 in file ..\Sample_ASM_Keil_ARM7.s
Comment: halt used once
loop 00000008

Symbol: loop
   Definitions
      At line 19 in file ..\Sample_ASM_Keil_ARM7.s
   Uses
      At line 22 in file ..\Sample_ASM_Keil_ARM7.s
Comment: loop used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CONSTANTS 00000000

Symbol: CONSTANTS
   Definitions
      At line 37 in file ..\Sample_ASM_Keil_ARM7.s
   Uses
      None
Comment: CONSTANTS unused
DELAY_VAL 00000010

Symbol: DELAY_VAL
   Definitions
      At line 54 in file ..\Sample_ASM_Keil_ARM7.s
   Uses
      None
Comment: DELAY_VAL unused
DIPS 00000004

Symbol: DIPS
   Definitions
      At line 46 in file ..\Sample_ASM_Keil_ARM7.s
   Uses
      None
Comment: DIPS unused
LEDS 00000000

Symbol: LEDS
   Definitions
      At line 44 in file ..\Sample_ASM_Keil_ARM7.s
   Uses
      None
Comment: LEDS unused
PBS 00000008

Symbol: PBS
   Definitions
      At line 48 in file ..\Sample_ASM_Keil_ARM7.s
   Uses
      None
Comment: PBS unused
UART 0000000C

Symbol: UART
   Definitions
      At line 50 in file ..\Sample_ASM_Keil_ARM7.s
   Uses
      None
Comment: UART unused
constant1 00000018

Symbol: constant1
   Definitions
      At line 58 in file ..\Sample_ASM_Keil_ARM7.s
   Uses
      At line 24 in file ..\Sample_ASM_Keil_ARM7.s
Comment: constant1 used once
string1 0000001C

Symbol: string1



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 60 in file ..\Sample_ASM_Keil_ARM7.s
   Uses
      None
Comment: string1 unused
variable1_addr 00000014

Symbol: variable1_addr
   Definitions
      At line 56 in file ..\Sample_ASM_Keil_ARM7.s
   Uses
      At line 27 in file ..\Sample_ASM_Keil_ARM7.s
Comment: variable1_addr used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

VARIABLES 00000000

Symbol: VARIABLES
   Definitions
      At line 66 in file ..\Sample_ASM_Keil_ARM7.s
   Uses
      None
Comment: VARIABLES unused
variable1 00000000

Symbol: variable1
   Definitions
      At line 72 in file ..\Sample_ASM_Keil_ARM7.s
   Uses
      At line 25 in file ..\Sample_ASM_Keil_ARM7.s
      At line 26 in file ..\Sample_ASM_Keil_ARM7.s
      At line 57 in file ..\Sample_ASM_Keil_ARM7.s

2 symbols
345 symbols in table
