


ARM Macro Assembler    Page 1 


    1 00000000         ;-------------------------------------------------------
                       ---------------------------
    2 00000000         ;-- License terms :
    3 00000000         ;-- You are free to use this code as long as you
    4 00000000         ;--  (i) DO NOT post it on any public repository;
    5 00000000         ;--  (ii) use it only for educational purposes;
    6 00000000         ;--  (iii) accept the responsibility to ensure that your
                        implementation does not violate any intellectual proper
                       ty of ARM Holdings or other entities.
    7 00000000         ;--  (iv) accept that the program is provided "as is" wi
                       thout warranty of any kind or assurance regarding its su
                       itability for any particular purpose;
    8 00000000         ;--  (v) send an email to rajesh.panicker@ieee.org brief
                       ly mentioning its use (except when used for the course C
                       G3207 at the National University of Singapore);
    9 00000000         ;--  (vi) retain this notice in this file or any files d
                       erived from this.
   10 00000000         ;-------------------------------------------------------
                       ---------------------------
   11 00000000         
   12 00000000                 AREA             MYCODE, CODE, READONLY, ALIGN=9
 
                                                            ; 2^9 = 512 bytes (
                                                            enough space for 12
                                                            8 words). Each sect
                                                            ion is aligned to a
                                                            n address divisible
                                                             by 512.
   13 00000000                 ENTRY
   14 00000000         
   15 00000000         ; ------- <code memory (ROM mapped to Instruction Memory
                       ) begins>
   16 00000000         ; Total number of instructions should not exceed 127 (12
                       6 excluding the last line 'halt B halt').
   17 00000000         
   18 00000000 E51F1008        LDR              R1, LEDS    ; Read the location
                                                             LEDs to get a poin
                                                            ter to (address of)
                                                             the LEDs into R1. 
                                                            R1 content will be 
                                                            0x00000C00 after th
                                                            is step is executed
                                                            .
   19 00000004 E51F2008        LDR              R2, DIPS    ; Read the location
                                                             DIPs to get a poin
                                                            ter to (address of)
                                                             the DIPs into R2. 
                                                            R2 content will be 
                                                            0x00000C04 after th
                                                            is step is executed
                                                            .  
   20 00000008         
   21 00000008         main_loop
   22 00000008 E51F3008        LDR              R3, DELAY_VAL ; Read the locati
                                                            on DELAY_VAL (tenta
                                                            tively, 4) to get t
                                                            he number of iterat
                                                            ions in the delay l
                                                            oop into R3.



ARM Macro Assembler    Page 2 


   23 0000000C E5924000        LDR              R4, [R2]    ; Read the location
                                                             pointed to by R2 (
                                                            i.e., DIPs) and get
                                                             the value into R4.
                                                            
   24 00000010 E5814000        STR              R4, [R1]    ; Write R4 content 
                                                            into the location p
                                                            ointed by R1 (i.e.,
                                                             LEDs). If you get 
                                                            an access violation
                                                             notification, you 
                                                            haven't applied the
                                                             MMIO.ini file.
   25 00000014         
   26 00000014         delay_loop
   27 00000014 E2533001        SUBS             R3, R3, #1  ; Implement a delay
                                                             loop. Run the loop
                                                             by the number of i
                                                            terations specified
                                                             in R3. 
   28 00000018 1AFFFFFD        BNE              delay_loop  ; A delay loop is t
                                                            he equivalent of fo
                                                            r(i=0; i<R3; i++){}
                                                            ; - a loop which ru
                                                            ns R3 times without
                                                             doing anything.
   29 0000001C         ;B main_loop  ; Go back to line 18. Uncomment this line 
                       if you wish to go back and loop
   30 0000001C         ; which you might want to do when simulating reading DIP
                       s and writing the value to LEDs continously
   31 0000001C         
   32 0000001C         ; some random instructions below to illustrate the use o
                       f PC as an operand, loads, stores etc - doesn't do anyth
                       ing meaningful. Try them out nevertheless.
   33 0000001C E1A0100F        MOV              R1, R15     ; It is interesting
                                                             to note that R15 i
                                                            s read as PC+8 in A
                                                            RM7. Here, R1 = PC+
                                                            8 = 0x1C + 8 = 0x24
                                                            . Does it make sens
                                                            e to have PC=0x1C? 
                                                            - yes, as this is t
                                                            he 7th instruction.
                                                            
   34 00000020 E51F0008        LDR              R0, constant1 ; 
   35 00000024 E50F5008        STR              R5, variable1 ; PC relative STR
                                                            s are supported in 
                                                            ARM7 (ARMv3 ISA), u
                                                            nlike LPC1769/ARM C
                                                            ortex M3 or STM32L4
                                                            /ARM Cortex M4 (ARM
                                                            v7M ISA)
   36 00000028 E51F5008        LDR              R5, variable1 ; load from a var
                                                            iable only after st
                                                            oring something to 
                                                            it (variables are i
                                                            n RAM - a volatile 
                                                            memory)
   37 0000002C E51F2008        LDR              R2, variable1_addr ; to get the



ARM Macro Assembler    Page 3 


                                                             address of variabl
                                                            e1 in R2. 
   38 00000030         ; instead of the pseudo-instruction LDR  R2, =variable1,
                        use LDR R2, variable1_addr and variable1_addr DCD varia
                       ble1
   39 00000030 E5820000        STR              R0, [R2]    ; store using addre
                                                            ss of variable 1 as
                                                             a pointer. *R2 = R
                                                            0;
   40 00000034 E5820004        STR              R0, [R2,#4] ; *(R2+4) = R0; thi
                                                            s will cause an acc
                                                            ess violation as th
                                                            e simulator will se
                                                            e that there is no 
                                                            memory/variable all
                                                            ocated at 0x0000080
                                                            4. 
   41 00000038         ; It will work fine on hardware (i.e., in a real system)
                        though, just that you should be sure that the location 
                       that you are writing to is something that is ok to 
   42 00000038         ; write to (i.e., there is a real writeable hardware/mem
                       ory mapped to that location, and you are not accidentall
                       y overwriting something else, 
   43 00000038         ; and some other part of the code wont accidentally over
                       write this (the simulator checks this, real hardware wil
                       l happily allow you to shoot yourself in the foot).
   44 00000038         halt
   45 00000038 EAFFFFFE        B                halt        ; infinite loop to 
                                                            halt computation. /
                                                            / A program should 
                                                            not "terminate" wit
                                                            hout an operating s
                                                            ystem to return con
                                                            trol to
   46 0000003C         ; keep halt B halt as the last line of your code.
   47 0000003C         ; ------- <\code memory (ROM mapped to Instruction Memor
                       y) ends>
   48 0000003C         
   49 0000003C                 AREA             CONSTANTS, DATA, READONLY, ALIG
N=9
   50 00000000         ; ------- <constant memory (ROM mapped to Data Memory) b
                       egins>
   51 00000000         ; All constants should be declared in this section. This
                        section is read only (Only LDR, no STR).
   52 00000000         ; Total number of constants should not exceed 128 (124 e
                       xcluding the 4 used for peripheral pointers).
   53 00000000         ; If a variable is accessed multiple times, it is better
                        to store the address in a register and use it rather th
                       an load it repeatedly.
   54 00000000         
   55 00000000         ;Peripheral pointers
   56 00000000         LEDS
   57 00000000 00000C00        DCD              0x00000C00  ; Address of LEDs. 
                                                            //volatile unsigned
                                                             int * const LEDS =
                                                             (unsigned int*)0x0
                                                            0000C00;  
   58 00000004         DIPS
   59 00000004 00000C04        DCD              0x00000C04  ; Address of DIP sw



ARM Macro Assembler    Page 4 


                                                            itches. //volatile 
                                                            unsigned int * cons
                                                            t DIPS = (unsigned 
                                                            int*)0x00000C04;
   60 00000008         PBS
   61 00000008 00000C08        DCD              0x00000C08  ; Address of Push B
                                                            uttons. Optionally 
                                                            used in Lab 2 and l
                                                            ater
   62 0000000C         CONSOLE
   63 0000000C 00000C0C        DCD              0x00000C0C  ; Address of UART. 
                                                            Optionally used in 
                                                            Lab 2 and later
   64 00000010         CONSOLE_IN_valid
   65 00000010 00000C10        DCD              0x00000C10  ; Address of UART. 
                                                            Optionally used in 
                                                            Lab 2 and later
   66 00000014         CONSOLE_OUT_ready
   67 00000014 00000C14        DCD              0x00000C14  ; Address of UART. 
                                                            Optionally used in 
                                                            Lab 2 and later
   68 00000018         SEVENSEG
   69 00000018 00000C18        DCD              0x00000C18  ; Address of 7-Segm
                                                            ent LEDs. Optionall
                                                            y used in Lab 2 and
                                                             later
   70 0000001C         
   71 0000001C         ; Rest of the constants should be declared below.
   72 0000001C         ZERO
   73 0000001C 00000000        DCD              0x00000000  ; constant 0
   74 00000020         LSB_MASK
   75 00000020 000000FF        DCD              0x000000FF  ; constant 0xFF
   76 00000024         DELAY_VAL
   77 00000024 00000002        DCD              0x00000002  ; delay time.
   78 00000028         variable1_addr
   79 00000028 00000000        DCD              variable1   ; address of variab
                                                            le1. Required since
                                                             we are avoiding ps
                                                            eudo-instructions /
                                                            / unsigned int * co
                                                            nst variable1_addr 
                                                            = &variable1;
   80 0000002C         constant1
   81 0000002C ABCD1234        DCD              0xABCD1234  ; // const unsigned
                                                             int constant1 = 0x
                                                            ABCD1234;
   82 00000030         string1
   83 00000030 0D 0A 57 
              65 6C 63 
              6F 6D 65 
              20 74 6F 
              20 43 47 
              33 32 30 
              37 2E 2E 
              0D 0A 00         DCB              "\r\nWelcome to CG3207..\r\n",0
 
                                                            ; // unsigned char 
                                                            string1[] = "Hello 
                                                            World!"; // assembl



ARM Macro Assembler    Page 5 


                                                            er will issue a war
                                                            ning if the string 
                                                            size is not a multi
                                                            ple of 4, but the w
                                                            arning is safe to i
                                                            gnore
   84 00000048         stringptr
   85 00000048 00000000        DCD              string1     ;
   86 0000004C         
   87 0000004C         ; ------- <constant memory (ROM mapped to Data Memory) e
                       nds> 
   88 0000004C         
   89 0000004C         
   90 0000004C                 AREA             VARIABLES, DATA, READWRITE, ALI
GN=9
   91 00000000         ; ------- <variable memory (RAM mapped to Data Memory) b
                       egins>
   92 00000000         ; All variables should be declared in this section. This
                        section is read-write.
   93 00000000         ; Total number of variables should not exceed 128. 
   94 00000000         ; No initialization possible in this region. In other wo
                       rds, you should write to a location before you can read 
                       from it (i.e., write to a location using STR before read
                       ing using LDR).
   95 00000000         
   96 00000000         variable1
   97 00000000 00000000        DCD              0x00000000  ;  // unsigned int 
                                                            variable1;
   98 00000004         ; ------- <variable memory (RAM mapped to Data Memory) e
                       nds> 
   99 00000004         
  100 00000004                 END
Command Line: --debug --xref --apcs=interwork --depend=.\ARM_sample.d -o.\ARM_s
ample.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include --predefine="__EVAL 
SETA 1" --list=ARM_sample.lst ..\ARM_sample.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MYCODE 00000000

Symbol: MYCODE
   Definitions
      At line 12 in file ..\ARM_sample.s
   Uses
      None
Comment: MYCODE unused
delay_loop 00000014

Symbol: delay_loop
   Definitions
      At line 26 in file ..\ARM_sample.s
   Uses
      At line 28 in file ..\ARM_sample.s
Comment: delay_loop used once
halt 00000038

Symbol: halt
   Definitions
      At line 44 in file ..\ARM_sample.s
   Uses
      At line 45 in file ..\ARM_sample.s
Comment: halt used once
main_loop 00000008

Symbol: main_loop
   Definitions
      At line 21 in file ..\ARM_sample.s
   Uses
      None
Comment: main_loop unused
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CONSOLE 0000000C

Symbol: CONSOLE
   Definitions
      At line 62 in file ..\ARM_sample.s
   Uses
      None
Comment: CONSOLE unused
CONSOLE_IN_valid 00000010

Symbol: CONSOLE_IN_valid
   Definitions
      At line 64 in file ..\ARM_sample.s
   Uses
      None
Comment: CONSOLE_IN_valid unused
CONSOLE_OUT_ready 00000014

Symbol: CONSOLE_OUT_ready
   Definitions
      At line 66 in file ..\ARM_sample.s
   Uses
      None
Comment: CONSOLE_OUT_ready unused
CONSTANTS 00000000

Symbol: CONSTANTS
   Definitions
      At line 49 in file ..\ARM_sample.s
   Uses
      None
Comment: CONSTANTS unused
DELAY_VAL 00000024

Symbol: DELAY_VAL
   Definitions
      At line 76 in file ..\ARM_sample.s
   Uses
      At line 22 in file ..\ARM_sample.s
Comment: DELAY_VAL used once
DIPS 00000004

Symbol: DIPS
   Definitions
      At line 58 in file ..\ARM_sample.s
   Uses
      At line 19 in file ..\ARM_sample.s
Comment: DIPS used once
LEDS 00000000

Symbol: LEDS
   Definitions
      At line 56 in file ..\ARM_sample.s
   Uses
      At line 18 in file ..\ARM_sample.s
Comment: LEDS used once
LSB_MASK 00000020

Symbol: LSB_MASK



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 74 in file ..\ARM_sample.s
   Uses
      None
Comment: LSB_MASK unused
PBS 00000008

Symbol: PBS
   Definitions
      At line 60 in file ..\ARM_sample.s
   Uses
      None
Comment: PBS unused
SEVENSEG 00000018

Symbol: SEVENSEG
   Definitions
      At line 68 in file ..\ARM_sample.s
   Uses
      None
Comment: SEVENSEG unused
ZERO 0000001C

Symbol: ZERO
   Definitions
      At line 72 in file ..\ARM_sample.s
   Uses
      None
Comment: ZERO unused
constant1 0000002C

Symbol: constant1
   Definitions
      At line 80 in file ..\ARM_sample.s
   Uses
      At line 34 in file ..\ARM_sample.s
Comment: constant1 used once
string1 00000030

Symbol: string1
   Definitions
      At line 82 in file ..\ARM_sample.s
   Uses
      At line 85 in file ..\ARM_sample.s
Comment: string1 used once
stringptr 00000048

Symbol: stringptr
   Definitions
      At line 84 in file ..\ARM_sample.s
   Uses
      None
Comment: stringptr unused
variable1_addr 00000028

Symbol: variable1_addr
   Definitions
      At line 78 in file ..\ARM_sample.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 37 in file ..\ARM_sample.s
Comment: variable1_addr used once
15 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

VARIABLES 00000000

Symbol: VARIABLES
   Definitions
      At line 90 in file ..\ARM_sample.s
   Uses
      None
Comment: VARIABLES unused
variable1 00000000

Symbol: variable1
   Definitions
      At line 96 in file ..\ARM_sample.s
   Uses
      At line 35 in file ..\ARM_sample.s
      At line 36 in file ..\ARM_sample.s
      At line 79 in file ..\ARM_sample.s

2 symbols
352 symbols in table
