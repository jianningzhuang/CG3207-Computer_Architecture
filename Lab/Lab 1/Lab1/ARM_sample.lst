


ARM Macro Assembler    Page 1 


    1 00000000         ;-------------------------------------------------------
                       ---------------------------
    2 00000000         ;-- License terms :
    3 00000000         ;-- You are free to use this code as long as you
    4 00000000         ;--  (i) DO NOT post it on any public repository;
    5 00000000         ;--  (ii) use it only for educational purposes;
    6 00000000         ;--  (iii) accept the responsibility to ensure that your
                        implementation does not violate any intellectual proper
                       ty of ARM Holdings or other entities.
    7 00000000         ;--  (iv) accept that the program is provided "as is" wi
                       thout warranty of any kind or assurance regarding its su
                       itability for any particular purpose;
    8 00000000         ;--  (v) send an email to rajesh.panicker@ieee.org brief
                       ly mentioning its use (except when used for the course C
                       G3207 at the National University of Singapore);
    9 00000000         ;--  (vi) retain this notice in this file or any files d
                       erived from this.
   10 00000000         ;-------------------------------------------------------
                       ---------------------------
   11 00000000         
   12 00000000                 AREA             MYCODE, CODE, READONLY, ALIGN=9
 
                                                            ; 2^9 = 512 bytes (
                                                            enough space for 12
                                                            8 words). Each sect
                                                            ion is aligned to a
                                                            n address divisible
                                                             by 512.
   13 00000000                 ENTRY
   14 00000000         
   15 00000000         ; ------- <code memory (ROM mapped to Instruction Memory
                       ) begins>
   16 00000000         ; Total number of instructions should not exceed 127 (12
                       6 excluding the last line 'halt B halt').
   17 00000000         
   18 00000000         
   19 00000000 E51F1008        LDR              R1, LEDS    ; Load the address 
                                                            of LEDs into R1. R1
                                                             = 0x00000C00 
   20 00000004         
   21 00000004 E51F2008        LDR              R2, DIPS    ; Load the address 
                                                            of DIPs into R2. R2
                                                             = 0x00000C04
   22 00000008         
   23 00000008 E51F3008        LDR              R3, PBS     ; Load the address 
                                                            of PBs into R3. R3 
                                                            = 0x00000C08 
   24 0000000C         
   25 0000000C E51F4008        LDR              R4, SEVENSEG ; Load the address
                                                             of SEVENSEG into R
                                                            4. R4 = 0x00000C18
   26 00000010         
   27 00000010 E51F5008        LDR              R5, DELAY_VAL ; Read the locati
                                                            on DELAY_VAL to loa
                                                            d the number of ite
                                                            rations (250) in th
                                                            e delay loop into R
                                                            5.
   28 00000014         



ARM Macro Assembler    Page 2 


   29 00000014 E51F6008        LDR              R6, ZERO    ; Read the location
                                                             ZERO to load value
                                                             0 into R6.
   30 00000018         
   31 00000018 E51F7008        LDR              R7, DELAY_VAL ; Keeps track of 
                                                            when Player A press
                                                            es/releases button
   32 0000001C         
   33 0000001C E51F8008        LDR              R8, DELAY_VAL ; Keeps track of 
                                                            when Player B press
                                                            es/releases button
   34 00000020         
   35 00000020 E51FB008        LDR              R11, HUNDRED ; Read the locatio
                                                            n HUNDRED to load v
                                                            alue 100 into R
   36 00000024         
   37 00000024         instructions
   38 00000024         
   39 00000024 E07BC006        RSBS             R12, R11, R6 ; 0 - 100 = -100 (
                                                            0xFFFFFFF9C) C flag
                                                             not set   (Load an
                                                            d Use Hazard => Sta
                                                            ll D at 0x0a Flush 
                                                            E + W to E forwardi
                                                            ng)
   40 00000028         
   41 00000028 E0FBC006        RSCS             R12, R11, R6 ; 0 - 100 - (~0) =
                                                             -101 (0xFFFFFFF9B)
                                                             C flag not set (W 
                                                            to D forwarding)
   42 0000002C         
   43 0000002C E0DBC006        SBCS             R12, R11, R6 ; 100 - 0 - (~0) =
                                                             99 (0x63) C flag s
                                                            et
   44 00000030         
   45 00000030 E0FBC006        RSCS             R12, R11, R6 ; 0 - 100 - (~1) =
                                                             -100 (0xFFFFFFF9C)
                                                             C flag not set
   46 00000034         
   47 00000034 E2ACD066        ADC              R13, R12, #102 ; -100 + 102 + (
                                                            0) = 2 (M to E forw
                                                            arding)
   48 00000038         
   49 00000038 E11B000C        TST              R11, R12    ; 0x64 & 0x01  = 0x
                                                            00 (W to E forwardi
                                                            ng)
   50 0000003C         
   51 0000003C E33C0002        TEQ              R12, #2     ; 0b01 ^ 0b10 = 0b1
                                                            1 (W to D forwardin
                                                            g)
   52 00000040         
   53 00000040 E51FC008        LDR              R12, BOTH_WIN 
                                                            ; R12 hold AAAABBBB
                                                            
   54 00000044         
   55 00000044 E584C000        STR              R12, [R4]   ; display AAAABBBB 
                                                            on SevenSeg (W to M
                                                             mem-mem copy but s
                                                            till covered by Loa



ARM Macro Assembler    Page 3 


                                                            d and Use => Stall)
                                                            
   56 00000048         
   57 00000048 E51FC008        LDR              R12, LARGEST_VAL 
                                                            ; R12 = 0xFFFFFFFF
   58 0000004C         
   59 0000004C E00D0C9C        MUL              R13, R12, R12 ; 0XFFFFFFFF * 0X
                                                            FFFFFFFF = 0x000000
                                                            01 (Load and Use St
                                                            all + MCycle Stall)
                                                            
   60 00000050         
   61 00000050 E51FF008        LDR              R15, PC_LDR_ADDR ; lDR PC (flus
                                                            h 4 stages using PC
                                                            SrcE and PCWriteLDR
                                                            M/W)
   62 00000054         
   63 00000054         jump_back
   64 00000054 E386C0FF        ORR              R12, R6, #255 ; R12 used as tem
                                                            porary value regist
                                                            er
   65 00000058         ; ALUResult = 0x000000FF, Set R12 to 0xFF using bitwise 
                       OR
   66 00000058         
   67 00000058 E096D3CC        ADDS             R13, R6, R12, ASR #7 ; R6 = 0, 
                                                            R12 ASR #7 = 0x0000
                                                            0001
   68 0000005C         ; ALUResult = 0x00000001, C flag not set from ASR
   69 0000005C         
   70 0000005C E51FD008        LDR              R13, LARGE_VAL ; Load value 0x7
                                                            FFFFFFF largest sig
                                                            ned positive intege
                                                            r into R13
   71 00000060         
   72 00000060 E09DC0AC        ADDS             R12, R13, R12, LSR #1 ; Large P
                                                            ositive + Positive 
                                                            = Negative (Overflo
                                                            w V and Negative N 
                                                            flags set)
   73 00000064         ; ALUResult = 0x7FFFFFFF + 0x0000007F = 0x80000007E, N a
                       nd V Flags set
   74 00000064         
   75 00000064 600CC006        ANDVS            R12, R12, R6 ; If V flag set, c
                                                            lear R12 back to 0 
                                                            using bitwise AND
   76 00000068         ; ALUResult = 0x00000000, Flags not updated, still N and
                        V set
   77 00000068         
   78 00000068 415C000C        CMPMI            R12, R12    ; If N flag set, co
                                                            mpare R12(0) to R12
                                                            (0) (ALUControl = 0
                                                            1 SUB, Flags set)
   79 0000006C         ; ALUResult = 0 - 0 = 0 (Z flag set, C flag set because 
                       invert 0  = 1111...11 + 1 results in carry bit [32])
   80 0000006C         
   81 0000006C 017D008D        CMNEQ            R13, R13, LSL #1 ; If Z flag se
                                                            t, compare not R13 
                                                            with R13 LSL #1 (AL
                                                            UControl = 00 ADD, 



ARM Macro Assembler    Page 4 


                                                            Flags set)
   82 00000070         ; ALUResult = 0x7FFFFFFF + 0xFFFFFFFE = 1 7FFF FFFD (C f
                       lag set, V flag not set since Positive + Negative no ove
                       rflow)
   83 00000070         
   84 00000070 2591C004        LDRCS            R12, [R1, #4] ; If C flag set, 
                                                            Read input from DIP
                                                            S using positive of
                                                            fset
   85 00000074         ; ALUControl = 00 (ADD), ALUResult = 0x00000C04 = DIPS, 
                       R12 = 0x0000000F
   86 00000074         
   87 00000074 2502C004        STRCS            R12, [R2, #-4] ; Write to LEDS 
                                                            using negative offs
                                                            et
   88 00000078         ; ALUControl = 01 (SUB), ALUResult = 0x00000C00 = LEDS, 
                       LED_OUT = 0x0F
   89 00000078         
   90 00000078 225BB001        SUBCSS           R11, R11, #1 ; Decrement counte
                                                            r, ALUControl = 01 
                                                            (SUB), C Flag still
                                                             set since R11 -1 =
                                                             R11 + 111...110 + 
                                                            1 results in carry 
                                                            bit
   91 0000007C         ; Final iteration R11 = 0, R11 - 1 = 0 + 111...110 + 1 =
                        ALUResult = 0xFFFFFFFF (only N flag set, no C flag)
   92 0000007C         
   93 0000007C AAFFFFE8        BGE              instructions ; Check N == V
   94 00000080         ; Final iteration N = 1, V = 0, CondEx = 0, skip and bra
                       nch to main_loop
   95 00000080         
   96 00000080 EA000000        B                main_loop
   97 00000084         
   98 00000084         
   99 00000084         pc_load
  100 00000084 EAFFFFF2        B                jump_back   ;just to check PC c
                                                            hanged
  101 00000088         
  102 00000088         
  103 00000088         main_loop
  104 00000088         
  105 00000088 E35500FA        CMP              R5, #250    ; Display 10 on 7SE
                                                            G if countdown betw
                                                            een 9 and 10
  106 0000008C D51F6008        LDRLE            R6, SHOW_TEN ; LE checks for Z 
                                                            | (N ^ V), Z OR N a
                                                            nd V opp sign
  107 00000090 E35500E1        CMP              R5, #225
  108 00000094 C5846000        STRGT            R6, [R4]    ; GT (~Z) & (N ~^ V
                                                            ), NOT Z AND N and 
                                                            V same sign
  109 00000098         
  110 00000098 E35500E1        CMP              R5, #225    ; Display 9 on 7SEG
                                                             if countdown betwe
                                                            en 8 and 9
  111 0000009C D51F6008        LDRLE            R6, SHOW_NINE
  112 000000A0 E35500C8        CMP              R5, #200
  113 000000A4 C5846000        STRGT            R6, [R4]



ARM Macro Assembler    Page 5 


  114 000000A8         
  115 000000A8 E35500C8        CMP              R5, #200    ; Display 8 on 7SEG
                                                             if countdown betwe
                                                            en 7 and 8
  116 000000AC D51F6008        LDRLE            R6, SHOW_EIGHT
  117 000000B0 E35500AF        CMP              R5, #175
  118 000000B4 C5846000        STRGT            R6, [R4]
  119 000000B8         
  120 000000B8 E35500AF        CMP              R5, #175    ; Display 0 on 7SEG
                                                             if countdown less 
                                                            than or equal to 7 
                                                            to hide countdown
  121 000000BC D51F6008        LDRLE            R6, ZERO
  122 000000C0 D5846000        STRLE            R6, [R4]
  123 000000C4         
  124 000000C4 E5936000        LDR              R6, [R3]    ; Load Button Press
                                                            
  125 000000C8 E50F5008        STR              R5, variable1 ; Store current c
                                                            ounter value into v
                                                            ariable 1
  126 000000CC         
  127 000000CC E3560004        CMP              R6, #4      ; If A press (100),
                                                             Load current count
                                                            er value into R7
  128 000000D0 051F7008        LDREQ            R7, variable1
  129 000000D4         
  130 000000D4 E3560001        CMP              R6, #1      ; If B press (001),
                                                             Load current count
                                                            er value into R8
  131 000000D8 051F8008        LDREQ            R8, variable1
  132 000000DC         
  133 000000DC E3560005        CMP              R6, #5      ; If Both press (10
                                                            1), Load current co
                                                            unter value into R7
                                                             and R8
  134 000000E0 051F7008        LDREQ            R7, variable1
  135 000000E4 051F8008        LDREQ            R8, variable1
  136 000000E8         
  137 000000E8         
  138 000000E8 E2555001        SUBS             R5, R5, #1
  139 000000EC 1AFFFFE5        BNE              main_loop
  140 000000F0         
  141 000000F0 EAFFFFFF        B                delay_loop
  142 000000F4         
  143 000000F4         delay_loop
  144 000000F4         
  145 000000F4 E5936000        LDR              R6, [R3]
  146 000000F8 E50F5008        STR              R5, variable1
  147 000000FC         
  148 000000FC E3560004        CMP              R6, #4
  149 00000100 051F7008        LDREQ            R7, variable1
  150 00000104         
  151 00000104 E3560001        CMP              R6, #1
  152 00000108 051F8008        LDREQ            R8, variable1
  153 0000010C         
  154 0000010C E3560005        CMP              R6, #5
  155 00000110 051F7008        LDREQ            R7, variable1
  156 00000114 051F8008        LDREQ            R8, variable1
  157 00000118         



ARM Macro Assembler    Page 6 


  158 00000118         
  159 00000118 E2855001        ADD              R5, R5, #1  ; After countdown t
                                                            o 0, count back up 
                                                            to 2 before showing
                                                             winner
  160 0000011C E3550064        CMP              R5, #100    ; In this 2 seconds
                                                             delay, button pres
                                                            s still recorded, a
                                                            bsolute value to wh
                                                            o is closest to 0
  161 00000120 1AFFFFF3        BNE              delay_loop
  162 00000124 EAFFFFFF        B                winner
  163 00000128         
  164 00000128         
  165 00000128         winner
  166 00000128 E1570008        CMP              R7, R8      ; Compare absolute 
                                                            value of time betwe
                                                            en button press and
                                                             0 for both players
                                                            , lower value wins
  167 0000012C         
  168 0000012C C51F6008        LDRGT            R6, B_WIN
  169 00000130 C5846000        STRGT            R6, [R4]
  170 00000134         
  171 00000134 B51F6008        LDRLT            R6, A_WIN
  172 00000138 B5846000        STRLT            R6, [R4]
  173 0000013C         
  174 0000013C 051F6008        LDREQ            R6, BOTH_WIN
  175 00000140 05846000        STREQ            R6, [R4]
  176 00000144         
  177 00000144         
  178 00000144 EAFFFFFF        B                switch
  179 00000148         
  180 00000148         switch
  181 00000148 E5926000        LDR              R6, [R2]    ; Read Switches
  182 0000014C E5816000        STR              R6, [R1]    ; Output to LEDs
  183 00000150 EAFFFFFC        B                switch
  184 00000154         
  185 00000154         halt
  186 00000154 EAFFFFFE        B                halt
  187 00000158         
  188 00000158         
  189 00000158         
  190 00000158         
  191 00000158         ; ------- <\code memory (ROM mapped to Instruction Memor
                       y) ends>
  192 00000158         
  193 00000158                 AREA             CONSTANTS, DATA, READONLY, ALIG
N=9
  194 00000000         ; ------- <constant memory (ROM mapped to Data Memory) b
                       egins>
  195 00000000         ; All constants should be declared in this section. This
                        section is read only (Only LDR, no STR).
  196 00000000         ; Total number of constants should not exceed 128 (124 e
                       xcluding the 4 used for peripheral pointers).
  197 00000000         ; If a variable is accessed multiple times, it is better
                        to store the address in a register and use it rather th
                       an load it repeatedly.
  198 00000000         



ARM Macro Assembler    Page 7 


  199 00000000         ;Peripheral pointers
  200 00000000         LEDS
  201 00000000 00000C00        DCD              0x00000C00  ; Address of LEDs. 
                                                            //volatile unsigned
                                                             int * const LEDS =
                                                             (unsigned int*)0x0
                                                            0000C00;  
  202 00000004         DIPS
  203 00000004 00000C04        DCD              0x00000C04  ; Address of DIP sw
                                                            itches. //volatile 
                                                            unsigned int * cons
                                                            t DIPS = (unsigned 
                                                            int*)0x00000C04;
  204 00000008         PBS
  205 00000008 00000C08        DCD              0x00000C08  ; Address of Push B
                                                            uttons. Optionally 
                                                            used in Lab 2 and l
                                                            ater
  206 0000000C         CONSOLE
  207 0000000C 00000C0C        DCD              0x00000C0C  ; Address of UART. 
                                                            Optionally used in 
                                                            Lab 2 and later
  208 00000010         CONSOLE_IN_valid
  209 00000010 00000C10        DCD              0x00000C10  ; Address of UART. 
                                                            Optionally used in 
                                                            Lab 2 and later
  210 00000014         CONSOLE_OUT_ready
  211 00000014 00000C14        DCD              0x00000C14  ; Address of UART. 
                                                            Optionally used in 
                                                            Lab 2 and later
  212 00000018         SEVENSEG
  213 00000018 00000C18        DCD              0x00000C18  ; Address of 7-Segm
                                                            ent LEDs. Optionall
                                                            y used in Lab 2 and
                                                             later
  214 0000001C         
  215 0000001C         ; Rest of the constants should be declared below.
  216 0000001C         ZERO
  217 0000001C 00000000        DCD              0x00000000  ; constant 0
  218 00000020         LSB_MASK
  219 00000020 000000FF        DCD              0x000000FF  ; constant 0xFF
  220 00000024         HUNDRED
  221 00000024 00000064        DCD              0x00000064  ; constant 100
  222 00000028         LARGE_VAL
  223 00000028 7FFFFFFF        DCD              0x7FFFFFFF  ; constant max posi
                                                            tive signed integer
                                                            
  224 0000002C         LARGEST_VAL
  225 0000002C FFFFFFFF        DCD              0xFFFFFFFF  ; constant max unsi
                                                            gned integer
  226 00000030         DELAY_VAL
  227 00000030 000000FA        DCD              0x000000FA  ; delay time.
  228 00000034         SHOW_TEN
  229 00000034 01000100        DCD              0x01000100  ; 10 seconds in ter
                                                            ms of clock period 
                                                            and instructions in
                                                             main loop
  230 00000038         SHOW_NINE
  231 00000038 00900090        DCD              0x00900090  ; 9 seconds in term



ARM Macro Assembler    Page 8 


                                                            s of clock period a
                                                            nd instructions in 
                                                            main loop
  232 0000003C         SHOW_EIGHT
  233 0000003C 00800080        DCD              0x00800080  ; 8 seconds in term
                                                            s of clock period a
                                                            nd instructions in 
                                                            main loop
  234 00000040         A_WIN
  235 00000040 AAAAAAAA        DCD              0xAAAAAAAA  ; display A as winn
                                                            er
  236 00000044         B_WIN
  237 00000044 BBBBBBBB        DCD              0xBBBBBBBB  ; display B as winn
                                                            er
  238 00000048         BOTH_WIN
  239 00000048 AAAABBBB        DCD              0xAAAABBBB  ; display tie
  240 0000004C         
  241 0000004C         variable1_addr
  242 0000004C 00000000        DCD              variable1   ; address of variab
                                                            le1. Required since
                                                             we are avoiding ps
                                                            eudo-instructions /
                                                            / unsigned int * co
                                                            nst variable1_addr 
                                                            = &variable1;
  243 00000050         constant1
  244 00000050 ABCD1234        DCD              0xABCD1234  ; // const unsigned
                                                             int constant1 = 0x
                                                            ABCD1234;
  245 00000054         string1
  246 00000054 0D 0A 57 
              65 6C 63 
              6F 6D 65 
              20 74 6F 
              20 43 47 
              33 32 30 
              37 2E 2E 
              0D 0A 00         DCB              "\r\nWelcome to CG3207..\r\n",0
 
                                                            ; // unsigned char 
                                                            string1[] = "Hello 
                                                            World!"; // assembl
                                                            er will issue a war
                                                            ning if the string 
                                                            size is not a multi
                                                            ple of 4, but the w
                                                            arning is safe to i
                                                            gnore
  247 0000006C         stringptr
  248 0000006C 00000000        DCD              string1     ;
  249 00000070         PC_LDR_ADDR
  250 00000070 00000084        DCD              0x0000084   ; Address of the ha
                                                            lt loop
  251 00000074         
  252 00000074         ; ------- <constant memory (ROM mapped to Data Memory) e
                       nds> 
  253 00000074         
  254 00000074         
  255 00000074                 AREA             VARIABLES, DATA, READWRITE, ALI



ARM Macro Assembler    Page 9 


GN=9
  256 00000000         ; ------- <variable memory (RAM mapped to Data Memory) b
                       egins>
  257 00000000         ; All variables should be declared in this section. This
                        section is read-write.
  258 00000000         ; Total number of variables should not exceed 128. 
  259 00000000         ; No initialization possible in this region. In other wo
                       rds, you should write to a location before you can read 
                       from it (i.e., write to a location using STR before read
                       ing using LDR).
  260 00000000         
  261 00000000         variable1
  262 00000000 00000000        DCD              0x00000000  ;  // unsigned int 
                                                            variable1;
  263 00000004         ; ------- <variable memory (RAM mapped to Data Memory) e
                       nds> 
  264 00000004         
  265 00000004                 END
Command Line: --debug --xref --apcs=interwork --depend=.\ARM_sample.d -o.\ARM_s
ample.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include --predefine="__EVAL 
SETA 1" --list=ARM_sample.lst ..\ARM_sample.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MYCODE 00000000

Symbol: MYCODE
   Definitions
      At line 12 in file ..\ARM_sample.s
   Uses
      None
Comment: MYCODE unused
delay_loop 000000F4

Symbol: delay_loop
   Definitions
      At line 143 in file ..\ARM_sample.s
   Uses
      At line 141 in file ..\ARM_sample.s
      At line 161 in file ..\ARM_sample.s

halt 00000154

Symbol: halt
   Definitions
      At line 185 in file ..\ARM_sample.s
   Uses
      At line 186 in file ..\ARM_sample.s
Comment: halt used once
instructions 00000024

Symbol: instructions
   Definitions
      At line 37 in file ..\ARM_sample.s
   Uses
      At line 93 in file ..\ARM_sample.s
Comment: instructions used once
jump_back 00000054

Symbol: jump_back
   Definitions
      At line 63 in file ..\ARM_sample.s
   Uses
      At line 100 in file ..\ARM_sample.s
Comment: jump_back used once
main_loop 00000088

Symbol: main_loop
   Definitions
      At line 103 in file ..\ARM_sample.s
   Uses
      At line 96 in file ..\ARM_sample.s
      At line 139 in file ..\ARM_sample.s

pc_load 00000084

Symbol: pc_load
   Definitions
      At line 99 in file ..\ARM_sample.s
   Uses
      None
Comment: pc_load unused
switch 00000148



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: switch
   Definitions
      At line 180 in file ..\ARM_sample.s
   Uses
      At line 178 in file ..\ARM_sample.s
      At line 183 in file ..\ARM_sample.s

winner 00000128

Symbol: winner
   Definitions
      At line 165 in file ..\ARM_sample.s
   Uses
      At line 162 in file ..\ARM_sample.s
Comment: winner used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

A_WIN 00000040

Symbol: A_WIN
   Definitions
      At line 234 in file ..\ARM_sample.s
   Uses
      At line 171 in file ..\ARM_sample.s
Comment: A_WIN used once
BOTH_WIN 00000048

Symbol: BOTH_WIN
   Definitions
      At line 238 in file ..\ARM_sample.s
   Uses
      At line 53 in file ..\ARM_sample.s
      At line 174 in file ..\ARM_sample.s

B_WIN 00000044

Symbol: B_WIN
   Definitions
      At line 236 in file ..\ARM_sample.s
   Uses
      At line 168 in file ..\ARM_sample.s
Comment: B_WIN used once
CONSOLE 0000000C

Symbol: CONSOLE
   Definitions
      At line 206 in file ..\ARM_sample.s
   Uses
      None
Comment: CONSOLE unused
CONSOLE_IN_valid 00000010

Symbol: CONSOLE_IN_valid
   Definitions
      At line 208 in file ..\ARM_sample.s
   Uses
      None
Comment: CONSOLE_IN_valid unused
CONSOLE_OUT_ready 00000014

Symbol: CONSOLE_OUT_ready
   Definitions
      At line 210 in file ..\ARM_sample.s
   Uses
      None
Comment: CONSOLE_OUT_ready unused
CONSTANTS 00000000

Symbol: CONSTANTS
   Definitions
      At line 193 in file ..\ARM_sample.s
   Uses
      None
Comment: CONSTANTS unused
DELAY_VAL 00000030




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: DELAY_VAL
   Definitions
      At line 226 in file ..\ARM_sample.s
   Uses
      At line 27 in file ..\ARM_sample.s
      At line 31 in file ..\ARM_sample.s
      At line 33 in file ..\ARM_sample.s

DIPS 00000004

Symbol: DIPS
   Definitions
      At line 202 in file ..\ARM_sample.s
   Uses
      At line 21 in file ..\ARM_sample.s
Comment: DIPS used once
HUNDRED 00000024

Symbol: HUNDRED
   Definitions
      At line 220 in file ..\ARM_sample.s
   Uses
      At line 35 in file ..\ARM_sample.s
Comment: HUNDRED used once
LARGEST_VAL 0000002C

Symbol: LARGEST_VAL
   Definitions
      At line 224 in file ..\ARM_sample.s
   Uses
      At line 57 in file ..\ARM_sample.s
Comment: LARGEST_VAL used once
LARGE_VAL 00000028

Symbol: LARGE_VAL
   Definitions
      At line 222 in file ..\ARM_sample.s
   Uses
      At line 70 in file ..\ARM_sample.s
Comment: LARGE_VAL used once
LEDS 00000000

Symbol: LEDS
   Definitions
      At line 200 in file ..\ARM_sample.s
   Uses
      At line 19 in file ..\ARM_sample.s
Comment: LEDS used once
LSB_MASK 00000020

Symbol: LSB_MASK
   Definitions
      At line 218 in file ..\ARM_sample.s
   Uses
      None
Comment: LSB_MASK unused
PBS 00000008

Symbol: PBS



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 204 in file ..\ARM_sample.s
   Uses
      At line 23 in file ..\ARM_sample.s
Comment: PBS used once
PC_LDR_ADDR 00000070

Symbol: PC_LDR_ADDR
   Definitions
      At line 249 in file ..\ARM_sample.s
   Uses
      At line 61 in file ..\ARM_sample.s
Comment: PC_LDR_ADDR used once
SEVENSEG 00000018

Symbol: SEVENSEG
   Definitions
      At line 212 in file ..\ARM_sample.s
   Uses
      At line 25 in file ..\ARM_sample.s
Comment: SEVENSEG used once
SHOW_EIGHT 0000003C

Symbol: SHOW_EIGHT
   Definitions
      At line 232 in file ..\ARM_sample.s
   Uses
      At line 116 in file ..\ARM_sample.s
Comment: SHOW_EIGHT used once
SHOW_NINE 00000038

Symbol: SHOW_NINE
   Definitions
      At line 230 in file ..\ARM_sample.s
   Uses
      At line 111 in file ..\ARM_sample.s
Comment: SHOW_NINE used once
SHOW_TEN 00000034

Symbol: SHOW_TEN
   Definitions
      At line 228 in file ..\ARM_sample.s
   Uses
      At line 106 in file ..\ARM_sample.s
Comment: SHOW_TEN used once
ZERO 0000001C

Symbol: ZERO
   Definitions
      At line 216 in file ..\ARM_sample.s
   Uses
      At line 29 in file ..\ARM_sample.s
      At line 121 in file ..\ARM_sample.s

constant1 00000050

Symbol: constant1
   Definitions
      At line 243 in file ..\ARM_sample.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Uses
      None
Comment: constant1 unused
string1 00000054

Symbol: string1
   Definitions
      At line 245 in file ..\ARM_sample.s
   Uses
      At line 248 in file ..\ARM_sample.s
Comment: string1 used once
stringptr 0000006C

Symbol: stringptr
   Definitions
      At line 247 in file ..\ARM_sample.s
   Uses
      None
Comment: stringptr unused
variable1_addr 0000004C

Symbol: variable1_addr
   Definitions
      At line 241 in file ..\ARM_sample.s
   Uses
      None
Comment: variable1_addr unused
25 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

VARIABLES 00000000

Symbol: VARIABLES
   Definitions
      At line 255 in file ..\ARM_sample.s
   Uses
      None
Comment: VARIABLES unused
variable1 00000000

Symbol: variable1
   Definitions
      At line 261 in file ..\ARM_sample.s
   Uses
      At line 125 in file ..\ARM_sample.s
      At line 128 in file ..\ARM_sample.s
      At line 131 in file ..\ARM_sample.s
      At line 134 in file ..\ARM_sample.s
      At line 135 in file ..\ARM_sample.s
      At line 146 in file ..\ARM_sample.s
      At line 149 in file ..\ARM_sample.s
      At line 152 in file ..\ARM_sample.s
      At line 155 in file ..\ARM_sample.s
      At line 156 in file ..\ARM_sample.s
      At line 242 in file ..\ARM_sample.s

2 symbols
367 symbols in table
